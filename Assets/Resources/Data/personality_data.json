using TMPro;
using UnityEngine;
using UnityEngine.UI;
using DG.Tweening;
using System.Collections.Generic;
using System.Linq;

public class MineInfoPopup : MonoBehaviour
{
    [Header("UI Elements")]
    [SerializeField] private TextMeshProUGUI nameText;
    [SerializeField] private TextMeshProUGUI levelText;
    [SerializeField] private TextMeshProUGUI fameText;

    [Header("Stat Texts")]
    [SerializeField] private TextMeshProUGUI miningYieldBonusText;
    [SerializeField] private TextMeshProUGUI maxResourceBonusText;

    [Header("Exit Button")]
    [SerializeField] private Button exitBtn;

    [Header("Popup Root")]
    [SerializeField] private RectTransform popupRoot;
    private CanvasGroup canvasGroup;

    private void Awake()
    {
        if (exitBtn != null)
            exitBtn.onClick.AddListener(Close);

        canvasGroup = GetComponent<CanvasGroup>();
        if (canvasGroup == null)
            canvasGroup = gameObject.AddComponent<CanvasGroup>();

        gameObject.SetActive(false);
    }

    public void Show()
    {
        SetMineInfo();

        if (!gameObject.activeSelf)
            gameObject.SetActive(true);

        if (popupRoot != null)
        {
            popupRoot.localScale = Vector3.one * 0.8f;
            popupRoot.DOScale(1.0f, 0.25f).SetEase(Ease.OutBack);
        }
        if (canvasGroup != null)
        {
            canvasGroup.alpha = 0f;
            canvasGroup.DOFade(1f, 0.2f);
        }
    }

    public void Close()
    {
        if (popupRoot != null)
            popupRoot.DOScale(0.8f, 0.2f).SetEase(Ease.InBack);
        if (canvasGroup != null)
        {
            canvasGroup.DOFade(0f, 0.15f).OnComplete(() =>
            {
                gameObject.SetActive(false);
            });
        }
        else
        {
            gameObject.SetActive(false);
        }
    }

    private void SetMineInfo()
    {
        var forgeManager = GameManager.Instance?.ForgeManager;
        if (forgeManager == null)
        {
            nameText.text = "";
            levelText.text = "";
            fameText.text = "";
            miningYieldBonusText.text = "";
            maxResourceBonusText.text = "";
            return;
        }

        nameText.text = forgeManager.Name;
        levelText.text = forgeManager.Level.ToString();
        fameText.text = $"(명성치: {forgeManager.TotalFame})";

        // --- 채광스텟 집계 ---
        float totalMiningYieldBonus = 0f;     // "자원 채굴량 증가"
        float totalMaxResourceBonus = 0f;     // "최대 자원량 증가"

        var mineSceneMgr = FindObjectOfType<MineSceneManager>();
        if (mineSceneMgr == null || mineSceneMgr.mineGroups == null) return;

        foreach (var group in mineSceneMgr.mineGroups)
        {
            foreach (var slot in group.slots)
            {
                if (!slot.IsAssigned || slot.AssignedAssistant == null) continue;
                var assi = slot.AssignedAssistant;
                if (assi.Specialization == null) continue;
                // mining specialization만 대상
                if (!assi.Specialization.Key.StartsWith("mining")) continue;

                // mining specialization에서 스탯 정보 추출
                var miningStatNames = assi.Specialization.statNames;
                var miningStatValues = assi.Specialization.statValues;

                float miningMultiplier = assi.Personality?.miningMultiplier ?? 1f;

                for (int i = 0; i < miningStatNames.Count; i++)
                {
                    string statName = miningStatNames[i];
                    float statValue = miningStatValues[i];

                    // 실제로는 퍼센트 환산(0.6이면 60%)
                    float value = statValue * miningMultiplier;

                    // AbilityMultiplier(추가 보정치) 적용
                    if (assi.Multipliers != null)
                    {
                        foreach (var m in assi.Multipliers)
                        {
                            if (m.AbilityName.Contains("mine"))
                                value *= m.Multiplier;
                        }
                    }

                    if (statName.Contains("채굴량"))
                        totalMiningYieldBonus += value;
                    else if (statName.Contains("최대 자원량"))
                        totalMaxResourceBonus += value;
                }
            }
        }

        miningYieldBonusText.text =
            $"자원 채굴량 증가: +{(totalMiningYieldBonus * 100f):0.#}%";
        maxResourceBonusText.text =
            $"최대 자원량 증가: +{(totalMaxResourceBonus * 100f):0.#}%";
    }
}
